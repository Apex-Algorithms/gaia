// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IpfsMetadata {
    /// We version the data structured used to represent proposal metadata. Each
    /// proposal type has their own metadata and versioning that we can change
    /// independently of other proposal types.
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
    #[prost(enumeration = "ActionType", tag = "2")]
    pub r#type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Edit {
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
    #[prost(enumeration = "ActionType", tag = "2")]
    pub r#type: i32,
    #[prost(string, tag = "3")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "5")]
    pub ops: ::prost::alloc::vec::Vec<Op>,
    #[prost(string, repeated, tag = "6")]
    pub authors: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImportEdit {
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
    #[prost(enumeration = "ActionType", tag = "2")]
    pub r#type: i32,
    #[prost(string, tag = "3")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "5")]
    pub ops: ::prost::alloc::vec::Vec<Op>,
    #[prost(string, repeated, tag = "6")]
    pub authors: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "7")]
    pub created_by: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub block_hash: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub block_number: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub transaction_hash: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImportCsvMetadata {
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub columns: ::prost::alloc::vec::Vec<ImportCsvColumnMetadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImportCsvColumnMetadata {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(
        enumeration = "import_csv_column_metadata::CsvMetadataColumnType",
        tag = "2"
    )]
    pub r#type: i32,
    #[prost(string, optional, tag = "3")]
    pub relation_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "4")]
    pub is_id: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "5")]
    pub options: ::core::option::Option<Options>,
}
/// Nested message and enum types in `ImportCsvColumnMetadata`.
pub mod import_csv_column_metadata {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum CsvMetadataColumnType {
        Unknown = 0,
        Text = 1,
        Number = 2,
        Checkbox = 3,
        Url = 4,
        Time = 5,
        Point = 6,
        Relation = 7,
    }
    impl CsvMetadataColumnType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unknown => "UNKNOWN",
                Self::Text => "TEXT",
                Self::Number => "NUMBER",
                Self::Checkbox => "CHECKBOX",
                Self::Url => "URL",
                Self::Time => "TIME",
                Self::Point => "POINT",
                Self::Relation => "RELATION",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNKNOWN" => Some(Self::Unknown),
                "TEXT" => Some(Self::Text),
                "NUMBER" => Some(Self::Number),
                "CHECKBOX" => Some(Self::Checkbox),
                "URL" => Some(Self::Url),
                "TIME" => Some(Self::Time),
                "POINT" => Some(Self::Point),
                "RELATION" => Some(Self::Relation),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Op {
    #[prost(enumeration = "OpType", tag = "1")]
    pub r#type: i32,
    /// *
    /// Used when setting a single triple
    #[prost(message, optional, tag = "2")]
    pub triple: ::core::option::Option<Triple>,
    /// *
    /// Used when setting batch ops or deleting an entity
    #[prost(message, optional, tag = "3")]
    pub entity: ::core::option::Option<Entity>,
    /// *
    /// Used when creating or deleting a relation
    #[prost(message, optional, tag = "4")]
    pub relation: ::core::option::Option<Relation>,
    /// *
    /// Used when setting batch ops
    #[prost(message, repeated, tag = "5")]
    pub triples: ::prost::alloc::vec::Vec<Triple>,
    /// *
    /// Used when importing a csv file
    #[prost(string, optional, tag = "6")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "7")]
    pub metadata: ::core::option::Option<ImportCsvMetadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Triple {
    #[prost(string, tag = "1")]
    pub entity: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub attribute: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub value: ::core::option::Option<Value>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Value {
    #[prost(enumeration = "ValueType", tag = "1")]
    pub r#type: i32,
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub options: ::core::option::Option<Options>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Relation {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub from_entity: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub to_entity: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub index: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Entity {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Import {
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
    #[prost(enumeration = "ActionType", tag = "2")]
    pub r#type: i32,
    #[prost(string, tag = "3")]
    pub previous_network: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub previous_contract_address: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "5")]
    pub edits: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Options {
    #[prost(string, optional, tag = "1")]
    pub format: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub unit: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OpType {
    Unknown = 0,
    SetTriple = 1,
    DeleteTriple = 2,
    SetTripleBatch = 3,
    DeleteEntity = 4,
    CreateRelation = 5,
    DeleteRelation = 6,
    ImportFile = 7,
}
impl OpType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "OP_TYPE_UNKNOWN",
            Self::SetTriple => "SET_TRIPLE",
            Self::DeleteTriple => "DELETE_TRIPLE",
            Self::SetTripleBatch => "SET_TRIPLE_BATCH",
            Self::DeleteEntity => "DELETE_ENTITY",
            Self::CreateRelation => "CREATE_RELATION",
            Self::DeleteRelation => "DELETE_RELATION",
            Self::ImportFile => "IMPORT_FILE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OP_TYPE_UNKNOWN" => Some(Self::Unknown),
            "SET_TRIPLE" => Some(Self::SetTriple),
            "DELETE_TRIPLE" => Some(Self::DeleteTriple),
            "SET_TRIPLE_BATCH" => Some(Self::SetTripleBatch),
            "DELETE_ENTITY" => Some(Self::DeleteEntity),
            "CREATE_RELATION" => Some(Self::CreateRelation),
            "DELETE_RELATION" => Some(Self::DeleteRelation),
            "IMPORT_FILE" => Some(Self::ImportFile),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ValueType {
    Unknown = 0,
    Text = 1,
    Number = 2,
    Checkbox = 3,
    Url = 4,
    Time = 5,
    Point = 6,
}
impl ValueType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "VALUE_TYPE_UNKNOWN",
            Self::Text => "TEXT",
            Self::Number => "NUMBER",
            Self::Checkbox => "CHECKBOX",
            Self::Url => "URL",
            Self::Time => "TIME",
            Self::Point => "POINT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VALUE_TYPE_UNKNOWN" => Some(Self::Unknown),
            "TEXT" => Some(Self::Text),
            "NUMBER" => Some(Self::Number),
            "CHECKBOX" => Some(Self::Checkbox),
            "URL" => Some(Self::Url),
            "TIME" => Some(Self::Time),
            "POINT" => Some(Self::Point),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ActionType {
    Unknown = 0,
    AddEdit = 1,
    AddSubspace = 2,
    RemoveSubspace = 3,
    ImportSpace = 4,
    ArchiveSpace = 5,
}
impl ActionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "ACTION_TYPE_UNKNOWN",
            Self::AddEdit => "ADD_EDIT",
            Self::AddSubspace => "ADD_SUBSPACE",
            Self::RemoveSubspace => "REMOVE_SUBSPACE",
            Self::ImportSpace => "IMPORT_SPACE",
            Self::ArchiveSpace => "ARCHIVE_SPACE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ACTION_TYPE_UNKNOWN" => Some(Self::Unknown),
            "ADD_EDIT" => Some(Self::AddEdit),
            "ADD_SUBSPACE" => Some(Self::AddSubspace),
            "REMOVE_SUBSPACE" => Some(Self::RemoveSubspace),
            "IMPORT_SPACE" => Some(Self::ImportSpace),
            "ARCHIVE_SPACE" => Some(Self::ArchiveSpace),
            _ => None,
        }
    }
}
